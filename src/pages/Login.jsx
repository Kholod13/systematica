import React, { useState } from "react";
import { ENDPOINTS } from "../services/endpoints";
function Login() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState(null);

  // üîπ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
  const handleSubmit = async (e) => {
    e.preventDefault(); // —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–ª–∞—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    setError(null);

    try {
      const response = await fetch(ENDPOINTS.LOGIN, { // <-- —Ç–≤–æ–π endpoint
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          username: "koliakova",
          password: "Test12345!",
        }),
      });

      if (!response.ok) {
        console.log("link server:", ENDPOINTS.LOGIN);
        console.log("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status);
        const text = await response.text();
        console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", text);
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
      }

      const data = await response.json();
      console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç API:", data);

      // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º access —Ç–æ–∫–µ–Ω
      localStorage.setItem("access", data.access);

      // üîπ –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      localStorage.setItem("user", JSON.stringify(data.user));

      // üîπ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
      window.location.href = "/dashboard"; 
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <div className="wrapper">
      <form className="form" onSubmit={handleSubmit}>
        <div className="input-group">
          <p>Login</p>
          <input
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            required
            className="inputLogin"
          />
        </div>
        <div className="input-group">
          <p>Password</p>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className="inputLogin"
          />
          {error && <p className="errorText">{error}</p>}
        </div>
        <button className="buttonLogin" type="submit">–£–≤—ñ–π—Ç–∏</button>
      </form>
    </div>
  );
}

export default Login;
